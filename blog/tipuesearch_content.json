{"pages":[{"title":"About","text":"cmsimde 內容管理系統 倉儲: https://github.com/mdecycu/cmsimde_site 網站: https://mde.tw/cmsimde_site/ 簡報: https://mde.tw/cmsimde_site/reveal 網誌: https://mde.tw/cmsimde_site/blog","tags":"misc","url":"./pages/about/"},{"title":"2024 Spring 課程","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引. 內容管理系統 使用者可以自行利用 cmsimde_site 倉儲作為 Template, 建立自己的網站內容管理系統. 引用網站網址連結的方法: cmsimde_site - 在文章中多次引用同一個網站連結時, 可以使用此種方法. https://github.com/mdecycu/cmsimde_site - 假如想要快速將網址套用 html 網站連結, 可以使用此種方法. cmsimde_site - 也可以使用 Markdown 的標準網站連結使用格式. # 引用 Python 程式的方法 for i in range(10): print(i, \"列出字串\") 也可以直接在 .md 檔案中使用 html 標註, 或加入 Javascript 或 Brython 程式碼. 從 1 累加到 100: 1 add to 100 將 iterable 與 iterator 相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. Filename: .py Run Output 清除輸出區 清除繪圖區 Reload 從 1 累加到 100 part2: 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block Filename: .py Run Output 清除輸出區 清除繪圖區 Reload","tags":"Spring","url":"./2024-Spring-w1-blog-tutorial.html"},{"title":"codespaces","text":"codespaces https://41223110.github.io/wcm2024/ chmod u+x init_replit ./init_replit 新增終端機 python3 main.py git add . git commit -m \"更改內容\" git push","tags":"codespaces","url":"./codespaces.html"},{"title":"w1","text":"W1 建立個人課程網站 必須自行建立 Github 帳號","tags":"w1","url":"./w1.html"},{"title":"w11","text":"w11 為了避免衝突先在分支改版後再進行合併 git branch 確認分支位置 git branch 41223110 新增分支 git branch 確認分支創建成功 git checkout 41223110 切換分支 git branch 確認切換成功 ps -a 確認有沒有執行中的python3，須為無 更改網頁內容 ======= git branch git add . git commit -m \"新增內容\" git push origin 41223110 git branch git checkout main 切回main進行合併 git branch git merge 41223110 進行合併 git branch git status git pull 要求宣告 git config pull.rebase false git pull 合併 ./acp \"更改內容\" \"41223110\"","tags":"w11","url":"./w11.html"},{"title":"w13","text":"w13 wsgi_v2.py 下載存入tmp 在近端輸入cd tmp/0516","tags":"w13","url":"./w13.html"},{"title":"w2","text":"w2 確認所有學員都已經建立個人網站 確認學員已經會利用 Replit 維護網站 如何利用 Codespaces 維護網站 利用 Github Classroom 建立分組網站 分組倉儲:https://github.com/mdewcm2024/1a-ag4","tags":"w2","url":"./w2.html"},{"title":"w3","text":"w3 個人倉儲納為分組倉儲的子模組 git submodule add github倉儲網址.git 學號","tags":"w3","url":"./w3.html"},{"title":"w6","text":"w6 Git 是一個分布式版本控制系統，用於跟蹤文件的變化和協作開發。它由 Linus Torvalds 於 2005 年創建，最初是為了幫助管理 Linux 內核的開發。以下是 Git 的發展歷史以及相關創作者的簡歷： 2005 年：Linus Torvalds 創建了 Git，並在 Linux 內核開發中開始使用它。 2005 年至今：Git 經歷了持續的發展和改進，吸引了全球範圍內的開發者和企業的廣泛采用。 Git 的關鍵版本和裏程碑： 2005 年：Git 1.0 發布。 2007 年：GitHub 成立，成為 Git 托管服務的主要平台之一，推動了 Git 的流行。 2008 年：Git 1.5 發布，引入了許多新功能和改進。 2013 年：Git 1.8 發布，引入了子模塊的支持等功能。 2016 年：Git 2.0 發布，帶來了性能和用戶體驗方面的改進。 2018 年：Git 2.18 發布，引入了一些新特性和改進。 2020 年：Git 2.28 發布，繼續改進性能和用戶體驗。 創作者簡歷： Linus Torvalds：芬蘭計算機程序員，Linux 內核的創建者和 Git 的創作者。他是開源軟件社區的重要人物之一，對計算機科學和開源社區產生了巨大影響。 使用 Git 的專業人士可以利用它來解決內容管理問題的各種方面，包括但不限於： 版本控制：Git 可以跟蹤文件的變化，使團隊成員能夠協作開發，並確保每個人都使用最新的代碼版本。這有助於避免沖突和混亂，同時也可以回溯歷史版本。 分支管理：Git 允許創建分支，這使得團隊能夠並行開發不同的功能或修覆不同的 bug，而不會幹擾主線開發。分支可以輕松合並回主線，從而實現協作。 遠程倉庫協作：Git 可以與遠程倉庫（如 GitHub、GitLab、Bitbucket 等）集成，使得多個開發者可以協作開發項目。他們可以推送（push）自己的更改到遠程倉庫，並拉取（pull）其他人的更改，從而實現協作開發。 代碼審查：Git 的分支和提交歷史使得進行代碼審查變得更加容易。團隊成員可以通過查看提交歷史和比較不同分支之間的差異來進行代碼審查，從而確保代碼質量和一致性。 備份和恢覆：Git 可以作為項目的備份工具，因為它可以存儲項目的完整歷史記錄。即使出現意外情況，例如誤刪文件，也可以通過 Git 來恢覆文件到之前的狀態。 綜上所述，Git 是一個強大的工具，可以幫助專業人士解決內容管理問題，提高團隊的生產效率和代碼質量。","tags":"w6","url":"./w6.html"},{"title":"期中","text":"期中 Brython 是什麼： Brython 是一種 Python 在瀏覽器端的實現，它允許你在瀏覽器中直接運行 Python 代碼。這意味著你可以使用 Python 來編寫客戶端的 Web 應用程序，而無需使用 JavaScript。Brython 實際上是一個 Python 解釋器，它被編譯成 JavaScript 並在瀏覽器中執行。這使得開發者可以利用 Python 的簡潔和易用性來構建交互式的 Web 應用程序，同時無需擔心客戶端與伺服器端之間的語言差異。 Brython 的特點： Brython 與大多數現代網路瀏覽器相容，包括 Chrome、Firefox 和 Safari。 它支援同步和異步程式設計。 Brython 提供了一種使用 Python 編寫互動式 Web 應用程式的簡單直觀的方法。 Brython 的工作原理: Brython 的工作原理是將 Python 代碼翻譯成可以在 Web 瀏覽器中執行的 Javascript 代碼。當開發人員使用 Brython 編寫 Python 代碼時，該代碼首先由 Brython 的編譯器翻譯成 Javascript 代碼。然後，生成的 Javascript 代碼在瀏覽器中執行，允許 Python 代碼像本機 Javascript 一樣運行。 使用Brython 的優勢: Python 是一種流行且功能強大的語言，易於學習和使用。已經熟悉 Python 的開發人員可以使用 Brython 編寫用戶端 Web 應用程式，而無需學習新的程式設計語言。 Brython 消除了開發人員為了編寫前端 Web 應用程式而學習 Javascript、HTML 和 CSS 的需要。這可以節省時間並簡化開發過程。 Brython 使使用 Python 編寫互動式 Web 應用程式變得容易，這對於開發基於 Web 的遊戲、教育應用程式等非常有用。 Brython 與大多數現代 Web 瀏覽器相容，因此開發人員可以編寫可供廣泛使用者使用的應用程式。 和Python的區別 運行環境：Python是一種通用的程式語言，主要在後端編程、軟體開發、數據分析等領域中使用，通常在電腦的本地環境或者服務器上運行。Brython是一個專門用於在瀏覽器中運行Python代碼的工具，它使得開發者能夠在前端開發中使用Python語言，而無需學習JavaScript。 用途：Python通常用於後端開發、數據分析、機器學習、科學計算等領域。Brython主要用於前端開發，可以用於網頁應用程序、網頁遊戲等前端項目。 適用性：Python適合於需要處理複雜邏輯、大量數據處理等後端任務。Brython適用於開發交互式網頁、複雜的用戶界面以及需要與用戶直接交互的前端項目。 總的來說，Python和Brython是兩個不同的工具，分別用於不同的開發場景。Python通常用於後端開發和數據處理，而Brython則是一個適合於前端開發的選擇，讓開發者可以使用他們熟悉的Python語言來進行網頁前端開發。","tags":"期中","url":"./期中.html"},{"title":"期末","text":"期末 只要點擊下方連結，就能遊玩-數讀 http://120.113.99.38:8000/","tags":"期末","url":"./期末.html"}]}